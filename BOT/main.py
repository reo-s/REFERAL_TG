import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.types import ChatMemberUpdated

from config import API_TOKEN, ADMIN_ID
from db import (
    create_pool, setup_db,
    save_user, save_invite_link,
    add_bonus, get_user_refs,
    get_all_referrers, get_inviter_by_link
)

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()
pool = None

CHANNEL_ID   = -1001182955252               # —Ç–≤–æ–π –∫–∞–Ω–∞–ª
CHANNEL_LINK = "https://t.me/fleshkatrenera"
bonuses = {
    "levels": [1, 3, 5, 10],
    "links": {
        1: "https://disk.yandex.ru/i/1EIIjw3htWkWXw",
        3: "https://disk.yandex.ru/i/N5S6eYQBgfyn5Q",
        5: "https://disk.yandex.ru/d/_WqG8_kiFYUpYw"
    }
}

@dp.message(Command("invite"))
async def cmd_invite(message: types.Message):
    inviter = message.from_user.id
    # —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    link_obj = await bot.create_chat_invite_link(
        chat_id=CHANNEL_ID,
        name=str(inviter),      # —Å–æ—Ö—Ä–∞–Ω—è–µ–º inviter_id –≤ name
        expire_date=None,
        member_limit=None
    )
    link = link_obj.invite_link

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_invite_link(pool, link, inviter)

    await message.answer(
        f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚Äë–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n{link}\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ –Ω–µ–π!"
    )

@dp.chat_member(ChatMemberUpdated.filter(F.chat.id == CHANNEL_ID))
async def on_channel_join(evt: ChatMemberUpdated):
    old, new = evt.old_chat_member, evt.new_chat_member
    # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if old.status in (ChatMemberStatus.LEFT, ChatMemberStatus.KICKED) \
       and new.status == ChatMemberStatus.MEMBER:

        user = new.user
        username = user.username or "–±–µ–∑_username"

        # —É–∑–Ω–∞—ë–º, –ø–æ –∫–∞–∫–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª
        inv_link = evt.invite_link.invite_link if evt.invite_link else None
        inviter = await get_inviter_by_link(pool, inv_link) if inv_link else None

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º P2 –≤ —Ç–∞–±–ª–∏—Ü–µ users
        await save_user(pool, user.id, username, inviter)

        # –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å P1
        if inviter:
            refs = await get_user_refs(pool, inviter)
            for lvl in bonuses["levels"]:
                if len(refs) >= lvl:
                    granted = await add_bonus(pool, inviter, lvl)
                    if granted:
                        text = (f"üéÅ –ë–æ–Ω—É—Å –∑–∞ {lvl} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö:\n"
                                f"{bonuses['links'].get(lvl,'')}")
                        await bot.send_message(inviter, text)


@dp.message(Command("myrefs"))
async def handle_myrefs(message: types.Message):
    uid = message.from_user.id
    refs = await get_user_refs(pool, uid)
    if not refs:
        return await message.answer("–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.")
    text = f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {len(refs)} —á–µ–ª–æ–≤–µ–∫(–∞):\n"
    for r_uid, r_uname in refs:
        text += f"‚Äî <a href='tg://user?id={r_uid}'>@{r_uname or 'user'}</a>\n"
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("allrefs"))
async def handle_allrefs(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    rows = await get_all_referrers(pool)
    if not rows:
        return await message.answer("‚ùå –ù–∏–∫—Ç–æ –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª.")
    text = "üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:\n"
    for uid, uname, cnt in rows:
        text += f"‚Äî <a href='tg://user?id={uid}'>@{uname or 'user'}</a> ‚Äî {cnt}\n"
    await message.answer(text, parse_mode="HTML")

async def main():
    global pool
    pool = await create_pool()
    await setup_db(pool)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
