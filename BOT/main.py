from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from config import API_TOKEN, ADMIN_ID
from db import create_pool, setup_db, save_user, add_bonus, get_user_refs, get_all_referrers

import asyncio

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
pool = None

bonuses = {
    "levels": [1, 3, 5, 10],
    "links": {
        1: "https://disk.yandex.ru/i/1EIIjw3htWkWXw",
        3: "https://disk.yandex.ru/i/N5S6eYQBgfyn5Q",
        5: "https://disk.yandex.ru/d/_WqG8_kiFYUpYw"
    }
}

CHANNEL_USERNAME = "fleshkatrenera"

@dp.message(Command("start"))
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_username"
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    if ref_id == user_id:
        ref_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = False
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        if member.status in ("member", "administrator", "creator"):
            is_subscribed = True
        else:
            await message.answer("‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\nhttps://t.me/fleshkatrenera")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await save_user(pool, user_id, username, ref_id)

    # –ë–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω
    if ref_id and is_subscribed:
        invited_users = await get_user_refs(pool, ref_id)
        invited_count = len(invited_users)

        ref_user = await bot.get_chat(ref_id)
        ref_username = ref_user.username or "–±–µ–∑_username"

        await check_bonus(ref_id, ref_username, invited_count)

    await message.answer(
        "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        "üì¢ –ö–∞–Ω–∞–ª: https://t.me/fleshkatrenera\n"
        "üß≤ –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: /invite"
    )

@dp.message(Command("invite"))
async def handle_invite(message: types.Message):
    user_id = message.from_user.id
    bot_username = (await bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"

    await message.answer(
        f"üëã –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}"
        "üì¢ –ü–æ–¥–µ–ª–∏—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!"
    )

async def check_bonus(ref_id: int, ref_username: str, invited_count: int):
    for level in bonuses["levels"]:
        if invited_count >= level:
            granted = await add_bonus(pool, ref_id, level)
            if granted:
                if level in bonuses["links"]:
                    await bot.send_message(
                        ref_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ {level} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö!"
                        f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n\n{bonuses['links'][level]}"
                    )
                elif level == 10:
                    await bot.send_message(
                        ADMIN_ID,
                        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{ref_username} (ID: {ref_id}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª 10 —á–µ–ª–æ–≤–µ–∫!"
                    )

@dp.message(Command("myrefs"))
async def handle_myrefs(message: types.Message):
    user_id = message.from_user.id
    invited_users = await get_user_refs(pool, user_id)

    if not invited_users:
        await message.answer("–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.")
        return

    result = f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {len(invited_users)} —á–µ–ª–æ–≤–µ–∫(–∞):\n"
    for uid, uname in invited_users:
        name_display = f"@{uname}" if uname else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        mention = f"<a href='tg://user?id={uid}'>{name_display}</a> (ID: {uid})"
        result += f"‚Äî {mention}\n"

    await message.answer(result)

@dp.message(Command("allrefs"))
async def handle_allrefs(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    referrers = await get_all_referrers(pool)
    if not referrers:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª.")
        return

    result = "üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
    for uid, uname, count in referrers:
        name_display = f"@{uname}" if uname else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        mention = f"<a href='tg://user?id={uid}'>{name_display}</a>"
        result += f"‚Äî {mention} (ID: {uid}) ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {count} —á–µ–ª.\n"

    await message.answer(result)

async def main():
    global pool
    pool = await create_pool()
    await setup_db(pool)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
